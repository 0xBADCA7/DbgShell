
#
# Format definitions: these are analogous to the <view> entries in a .ps1xml,
# except they are consumed by our alternate formatting engine, not the built-in
# PowerShell formatting engine.
#
# The definitions in this file are specifically for "debugee types"--
# definitions of how to display values in the debuggee. The type names
# typically have a "!" in them, and can be module-qualified (but do not have to
# be). The alternate formatting engine can find these view definitions because
# the alternate formatting engine use the "TypeNames" list of a PSObject to
# look up view definitions, and the debugger module inserts the debuggee type
# names into the "TypeNames" list of PSObjects that it generates to represent
# objects in the debuggee.
#

Register-AltTypeFormatEntries {

    # We keep private, shared functions in FmtUtils.ps1. If you have a script block that
    # needs to use them, be sure to use -CaptureContext, else they won't be available when
    # the script block is run.
 #  . "$PSScriptRoot\FmtUtils.ps1"


    New-AltTypeFormatEntry -TypeName 'CoreMessaging!System::String' {
        New-AltSingleLineViewDefinition {
            return (New-ColorString -Content '"').
                        AppendPushPopFg( [ConsoleColor]::Cyan, $_.m_rgchValue ).
                        Append( '"' )
        } # end AltSingleLineViewDefinition
    } # end Type CoreMessaging!System::String


    New-AltTypeFormatEntry -TypeName '!System::Object::_CnInternal' {
        New-AltSingleLineViewDefinition {
            return $_.ToColorString().Append( " {rc:$($_.m_cContextRef)}" )
        } # end AltSingleLineViewDefinition
    } # end Type _CnInternal


    New-AltTypeFormatEntry -TypeName '!Microsoft::CoreUI::HIDENTITY' {
        New-AltSingleLineViewDefinition {
            return (Format-DbgTypeName 'HIDENTITY').Append( ": 0x$($_.m_value.ToString('x'))" )
        } # end AltSingleLineViewDefinition
    } # end Type HIDENTITY


    New-AltTypeFormatEntry -TypeName '!Microsoft::CoreUI::Messaging::SenderInfo' {
        New-AltSingleLineViewDefinition {
            $str = "pid.tid : 0x$($_.ProcessID.ToString('x')).0x$($_.ThreadID.ToString('x'))"
            if( $_.IsKernel )
            {
                $str += "  (KERNEL)"
            }
            return $str
        } # end AltSingleLineViewDefinition
    } # end Type SenderInfo


    New-AltTypeFormatEntry -TypeName '!Microsoft::CoreUI::Messaging::MessageInfo' {
        New-AltSingleLineViewDefinition {
            $str = New-ColorString -Content (Format-AltSingleLine -InputObject $_._currentSenderInfo)
            return $str.Append( ' ' ).Append( (Format-AltSingleLine -InputObject $_._currentTargetIdentity) )
        } # end AltSingleLineViewDefinition
    } # end Type MessageInfo


    New-AltTypeFormatEntry -TypeName 'StackFrameLite' {
        New-AltCustomViewDefinition {

            $cs = New-ColorString -Content ([string]::Format( '{0:x2} ', $_.Index ))

            if( !$_.Symbol )
            {
                return $cs.Append( (Format-DbgAddress $_.BaseAddress) )
            }

            [string] $s = $null

            if( $_.Displacement -eq 0 ) {
                $s = $_.Symbol.ModuleQualifiedName;
            } else {
                $s = [String]::Format( "{0}+0x{1:x}", $_.Symbol.ModuleQualifiedName, $_.Displacement );
            }

            return $cs.Append( [MS.Dbg.DbgProvider]::ColorizeSymbol( $s ) )
        } # end AltCustomViewDefinition
    } # end Type StackFrameLite
} # end TypeEntries

